qt(0.975)
qt(0.975,df=19)
x <- scan()
mean(x)
sd(x)
var(x)
qt(0.975,df=4)
2.78*7.19/sqrt(5)
2*7.19/sqrt(5)
(714.8-720)/sqrt(3^2/5)
mean(x)
sd(x)
qt(0.975,df=4)
qt(0.05,df=24)
x <- scan()
mean(x)
var(x)
sd(x)
17.6/sqrt(5)
qt(0.95,0.95)
qt(0.95,df=4)
qt(0.05,df=19)
kekka <- numeric(10000)
for(i in 1:10000){
x <- rnorm(20,1100,30)
heikin <- mean(x)
bunsan <- var(x)
tval <- (heikin-170)/sqrt(bunsan/20)
kekka[i] <- tval
}
hist(jikken)
hist(kekka)
kekka <- numeric(10000)
for(i in 1:10000){
x <- rnorm(20,1100,30)
heikin <- mean(x)
bunsan <- var(x)
tval <- (heikin-1000)/sqrt(bunsan/20)
kekka[i] <- tval
}
hist(kekka)
hist(kekka,breaks="FD")
sort(kekka)[0.05*10000]
x <- scan()
x
mean(x)
var(x)
(0.57)/sqrt(1/7)
(0.57)/sqrt(1.42/7)
qt(0.975,df=6)
rnorm(10,60,2)
mean(rnorm(10,60,2))
jikken1 <- replicate(10000,mean(rnorm(10,60,2)))
jikken2 <- replicate(10000,mean(rnorm(10,62,2)))
par(mfrow=c(2,1))
hist(jikken1,breaks="FD")
hist(jikken2,breaks="FD")
hist(jikken1,breaks="FD",xlim=c(58,64))
hist(jikken2,breaks="FD",xlim=c(58,64))
60+1.645*2/sqrt(10)
sort(jikken1)[0.95*10000]
misjudge <- (jikken2<61.03)
sum(misjudge)
636/10000
jikken1 <- replicate(10000,mean(rnorm(5,60,2)))
jikken2 <- replicate(10000,mean(rnorm(5,62,2)))
hist(jikken1,breaks="FD")
hist(jikken2,breaks="FD")
hist(jikken1,breaks="FD",xlim=c(57,66))
hist(jikken2,breaks="FD",xlim=c(57,66))
60+1.645*2/sqrt(5)
sort(jikken1)[0.95*10000]
misjudge <- jikken2 < 61.5
sum(misjudge)
2837/10000
devtools::install_github('jimhester/knitrBootstrap', ref='rmarkdown_template')
install.packages("devtools")
devtools::install_github('jimhester/knitrBootstrap', ref='rmarkdown_template')
devtools::install_github('humburg/reportMD')
install.packages("tidyr",dependencies=TRUE)
devtools::install_github('humburg/reportMD')
devtools::install_github('humburg/reportMD',dependencies=TRUE)
install.packages("viridis",dependencies = TRUE)
devtools::install_github('humburg/reportMD')
x <- rnorm(1000); y <- rnorm(1000)
plot(x,y)
x <- rnorm(1000); y <- rnorm(1000)
plot(x,y)
x <- rnorm(1000); y <- rnorm(1000)
plot(x,y)
x <- rnorm(x)
y <- rnorm(y)
mean(x); var(x)
mean(y); var(y)
plot(x,y)
plot(x,y)
x <- rnorm(1000)
y <- rnorm(1000)
mean(x); var(x)
mean(y); var(y)
plot(x,y)
x <- rnorm(1000)
y <- rnorm(1000)
mean(x); var(x)
mean(y); var(y)
plot(x,y)
head(x)
library(forecast)
library(ggplot2)
train <- window(cp2,end=c(1990,12))
train <- window(co2,end=c(1990,12))
test <- window(co2,start=c(1991,1))
plot(train)
h=length(test)
h
ETS <- forecast(ets(train),h=h)
ARIMA <- forecast(auto.arima(train,lambda=0),h=h)
STL <- stlf(train,lambda=0,h=h)
X <- cbind(ETS=ETS$mean,ARIMA=ARIMA$mean,STL=STL$mean)
df <- cbind(co2,X)
tail(df)
autoplot(df)
install.packages("opera")
install.packages("forecastHybrid")
1-0.5^6-6*0.5^6
sample(1:6,6,replace=T)
sample(1:6,6,replace=T)
sort(sample(1:6,6,replace=T))
sort(sample(1:6,6,replace=T))[5]
sort(sample(1:6,6,replace=T))[5]
jikken <- replicate(10000,sort(sample(1:6,6,replace=T))[5])
hist(jikken,br="FD")
barplot(jikken)
table(jikken)
barplot(table(jikken))
sum(jikken>=4)
varp <- function(x){
kekka <- mean((x-mean(x))^2)
return(kekka)
}
sdp <- function(x){
kekka <- sqrt(varp(x))
return(kekka)
}
x <- scan()
varp(x)
sdp(x)
var(x)
}
varp <- function(x){
kekka <- mean((x-mean(x))^2)
return(kekka)
}
sdp <- function(x){
kekka <- sqrt(varp(x))
return(kekka)
}
ls()
install.packages("LearnBayes")
data(studentdata)
library(LearnBayes)
data("studentdata")
ls()
head(studentdata)
summary(studentdata)
dim(studentdata)
class(studentdata$Gender)
library(quantmod)
iletf <- getSymbols('1699.t',  from = "2015-03-31", auto.assign = FALSE, src='yahooj')
getSymbols("^GSPC")
rsi <- RSI(GSPC[, 4])
ls()
class(GSPC)
head(GSPC)
sig <- Lag(ifelse(rsi >= 0.5, 1, -1))
install.packages("PerformanceAnalytics")
library(PerformanceAnalytics)
ret <- ROC(GSPC[, 4])*sig
head(sig)
head(sig,100)
ret <- ret['2009-06-02/2010-09-07']
ret
eq <- cumprod(1+ret)
plot(eq)
table.Drawdowns(ret, top=10)
table.DownsideRisk(ret)
charts.PerformanceSummary(ret)
ls()
head(rsi)
head(rsi,50)
plot(rsi)
sig <- Lag(ifelse(rsi > 50,1,-1),-1)
sig <- Lag(ifelse(rsi > 50,1,-1))
head(sig,30)
plot(sig)
ret <- ROC(GSPC[, 4]))*sig
ret <- ROC(GSPC[, 4])*sig
head(ROC(GSPC[,4]),30)
ret <- ret['2009-06-02/2010-09-07']
plot(ret)
table.Drawdowns(ret, top=10)
ls()
tail(GSPC)
getSymbols('DEXJPUS', from = "2015-03-31", auto.assign = FALSE, src='FRED')
usdjpy <- getSymbols('DEXJPUS', from = "2015-03-31", auto.assign = FALSE, src='FRED')
wti <- getSymbols('DCOILWTICO', from = "2015-03-31", auto.assign = FALSE, src='FRED')
oiletf <- getSymbols('1699.t',  from = "2015-03-31", auto.assign = FALSE, src='yahooj')
install.packages("XML")
oiletf <- getSymbols('1699.t',  from = "2015-03-31", auto.assign = FALSE, src='yahooj')
ls()
oiletf <- oiletf$YJ1699.T.Adjusted
x <- ROC(na.locf(merge(oiletf, usdjpy, wti, all=FALSE)), na.pad=FALSE)
# colnames(x) <- c("t1699", "usdjpy", "wti")
head(x)
colnames(x) <- c("t1699", "usdjpy", "wti")
head(x)
sapply(x, sd)*sqrt(250)
install.packages("estatapi")
x <- runif(0,2)
x <- runif(200,0,2)
hist(x)
mean(x)
var(x)
x <- runif(400,0,2)
mean(x)
var(x)
x <- runif(400,0,2)
head(x,20)
hist(x)
mean(x)
var(x)
curve(x,dnorm(x,168,10))
curve(dnorm(x,168,10),from=135,to=200)
pnorm(178,mean=168,sd=10)-pnorm(158,mean=168,sd=10)
pnorm(188,mean=168,sd=10)-pnorm(148,mean=168,sd=10)
pnorm(198,mean=168,sd=10)-pnorm(138,mean=168,sd=10)
xax <- seq(140,200,length=1000)
yax <- dnorm(xax,mean=170,sd=10)
lines(xax,yax)
xax <- seq(140,200,length=1000)
yax <- dnorm(xax,mean=170,sd=10)
lines(xax,yax)
curve(dnorm(x,mean=170,sd=10))
curve(dnorm(x,mean=170,sd=10),from=140,to=200)
xr <- seq(185,200,length=500)
yr <- dnorm(xr,mean=170,sd=10)
xr.p <- c(xr,xr[500:1])
yr.p <- c(rep(0,500),dnorm(xr[500:1],mean=170,sd=10))
polygon(xr.p,yr.p,angle=45,density=25)
curve(dnorm(x,mean=168,sd=10),from=138,to=198)
xr <- seq(178,198,length=500)
xr.p <- c(xr,xr[500:1])
yr.p <- c(rep(0,500),dnorm(xr[500:1],mean=170,sd=10))
polygon(xr.p,yr.p,angle=45,density=25)
curve(dnorm(x,mean=168,sd=10),from=138,to=198)
xr <- seq(178,198,length=500)
xr.p <- c(xr,xr[500:1])
yr.p <- c(rep(0,500),dnorm(xr[500:1],mean=168,sd=10))
polygon(xr.p,yr.p,angle=45,density=25)
xl <- seq(138,158,length=500)
xl.p <- c(xl,xl[500:1])
yr.p <- c(rep(0,500),dnorm(xr[500:1],mean=168,sd=10))
polygon(xl.p,yl.p,angle=45,density=25)
xl <- seq(138,158,length=500)
xl.p <- c(xl,xl[500:1])
yr.p <- c(rep(0,500),dnorm(xl[500:1],mean=168,sd=10))
polygon(xl.p,yl.p,angle=45,density=25)
xl <- seq(138,158,length=500)
xl.p <- c(xl,xl[500:1])
yl.p <- c(rep(0,500),dnorm(xl[500:1],mean=168,sd=10))
polygon(xl.p,yl.p,angle=45,density=25)
install.packages("OECD")
library(OECD)
dsets <- get_datasets()
search_dataset("CLI",dsets)
search_dataset("indicator",dsets)
df <- get_dataset("MEI_CLI",start_time=c(2000,1),end_time=c(2016,6))
df <- get_dataset("MEI_CLI",start_time=2000,end_time=2016)
object.size(df)
names(df)
class(df)
head(df)
colnames(df)
df[100,]
df[1:100,]
get_data_structure("MEI_CLI")
info.cli <- get_data_structure("MEI_CLI")
class(info.cli)
names(info.cli)
info.cli$VAR_DESC
info.cli$SUBJECT
info.cli$LOCATION
info.cli$FREQUENCY
info.cli$TIME
names(info.cli)
info.cli$VAR_DESC
ls()
names(df)
head(df$obsTime)
head(df$obsValue)
head(df,30)
tail(df,30)
ls()
class(dsets)
colnames(dsets)
head(dsets)
head(df)
df$SUBJECT
info.cle
names(info.cli)
info.cli$SUBJECT
cli.data <- subset(df,SUBJECT == "LOLI")
dim(df)
dim(cli.data)
head(df)
levels(df$SUBJECT)
class(df$SUBJECT)
class(df$LOCATION)
levels(as.factor(df$SUBJECT))
cli.data <- get_dataset("LOLI")
cli.data <- subset(df,SUBJECT=="LOLITAA")
dim(cli.data)
library(dplyr)
cli.data <- (df %>% filter(SUBJECT == "LOLITOAA"))
dim(cli.data)
head(cli.data)
ls()
save(cli.data,df,info.cli,dsets,file="OECD_MEI_CLI_20161023.RData")
setwd("~/")
dir()
install.packages("tools",dependencies = TRUE)
install.packages("tools", dependencies = TRUE)
install.packages("tools", dependencies = TRUE)
install.packages("tools", dependencies = TRUE)
install.packages("tools", dependencies = TRUE)
library(knitr)
knit("knit-sample.Rnw",encoding="UTF8")
tools::texi2pdf("knit-sample.tex",texi2dvi="lualatex")
knit("knit-sample.Rnw",encoding="UTF8")
tools::texi2dvi("knit-sample.tex",texi2dvi="lualatex")
knit2pdf("kinit-sample.Rnw,compiler="lualatex",encoding="UTF8)
knit2pdf("knit-sample.Rnw",compiler="lualatex",encoding="UTF8")
Sys.setenv(PATH=paste0(Sys.getenv("PATH"),"C:\texlive\2016\bin\win32"))
Sys.setenv(PATH=paste0(Sys.getenv("PATH"),"C:\\texlive\\2016\\bin\\win32"))
Sys.getenv("PATH")
knit2pdf("knit-sample.Rnw",compiler="lualatex",encoding="UTF8")
knit2pdf("knit-sample.Rnw",encoding="UTF8",compiler="lualatex")
knit2pdf("knit-sample.Rnw",encoding="UTF8",compiler="lualatex")
install.packages("devtools")
devtools::install_github("ramnathv/slidify@fix-encode")
devtools::install_github("slidifyLibraries","ramnathv")
library(knitr)
dir()
knit("knit-sample.Rnw",encoding="UTF8")
system("ptex2pdf -l -ot \"-kanji=utf8"\"knit-sample")
Sys.setenv(PATH=paste0(Sys.getenv("PATH"),"C:\\texlive\\2016\\bin\\win32"))
system("ptex2pdf -l -ot \"-kanji=utf8"\"knit-sample")
system("ptex2pdf -l knit-sample")
knit("knit-sample.Rnw")
knit("knit-sample.Rnw",encoding="UTF8")
system("ptex2pdf -l knit-sample")
knit("knit-sample.Rnw",encoding="UTF8")
system("ptex2pdf -l knit-sample")
install.packages("googleVis")
library(googleVis)
data("Fruits")
ls()
class(Fruits)
head(Fruits)
p <- gvisMotionChart(Fruits,idvar="Fruit",timevar="Year")
plot(p)
.rs.enableRStudioConnectUI(TRUE)
library("yaml", lib.loc="~/R/win-library/3.3")
install.packages(c("acepack", "colorspace", "curl", "effects", "evaluate", "forecast", "forecastHybrid", "jsonlite", "manipulate", "quantmod", "R6", "Rcmdr", "RcppArmadillo", "reshape2", "rmarkdown", "shiny", "stringi"))
install.packages("yaml")
plot(cars)
iris %>% group_by(Species) %>% summarise(avgPetalWIdth=mean(Petal.Width))
iris %>% group_by(Species) %>% summarise(avgPetalWIdth=mean(Petal.Width))
library(magrittr)
iris %>% group_by(Species) %>% summarise(avgPetalWIdth=mean(Petal.Width))
iris %>%
group_by(Species) %>%
summarise(avgPetalWIdth=mean(Petal.Width))
library(dplyr)
data("iris")
iris %>% group_by(Species) %>% summarise(avgPetalLength=mean(Petal.Width),avgPetalLength=mean(Petal.Length))
library(magrittr)
head(iris)
iris %>% group_by(Species) %>% summarize(avgPetalWidth=mean(Petal.Width))
iris %>% group_by(Species) %>% summarize(avgPetalWidth=mean(Petal.Width))
plot(cars)
library(dplyr)
library(magrittr)
data(iris)
head(iris)
plot(cars)
library(dplyr)
data(iris)
head(iris)
iris %>% dplyr::group_by(Species) %>% dplyr::summarize(avgPetalWidth=mean(Petal.Width))
detach("dplyr",unload=T)
detach("package:dplyr",unload=T)
library(dplyr)
dir()
dir)
dir()
library(knitr)
dir()
knit2html("TesGoogleViz.Rmd,",encoding="UTF8")
dir()
dir()
knit2html("TestGoogleViz.Rmd",encoding="UTF8")
knit2html("TestGoogleViz.Rmd",encoding="UTF8")
library(googleVis)
library(ggplot2)
data(mpg)
head(mpg)
summary(mpg)
cut(mpg$hwy,10:45:5)
cut(mpg$hwy,10:45)
cut(mpg$hwy,10:45:5)
cut(mpg$hwy,seq(10,45,5))
dim(mpg)
library(googleVis)
d <- data.frame(table(cut(ggplot2::mpg,seq(10,45,5))))
d <- data.frame(table(cut(ggplot2::mpg$hwy,seq(10,45,5))))
head(d)
knit2html("TestGoogleViz.Rmd")
knit2html("TestGoogleViz.Rmd",encoding="UTF8")
rmarkdown::render("TestGoogleViz.Rmd",encoding="UTF8")
rmarkdown::render("TestGoogleViz.Rmd",encoding="UTF8")
browseURL("TestGoogleViz.html")
browseURL("TestGoogleViz.html")
install.packages("tables")
library(tables)
data("iris")
class(iris)
head(iris)
iris1 <- iris[,c(1,2,5)]
head(iris1)
tabular((Species) ~ All(iris1) * (mean+sd),data=iris1)
booktabs()
latex(tabular((Species) ~ All(iris1) * (mean+sd),data=iris1))
tabular((Species) ~ All(iris1) * (mean+sd),data=iris1)
demno(package="rCharts")
library(devtools)
install_github("rCharts","ramnathv")
demo("rCharts")
library(rCharts)
d <- data.frame(d=LETTERS[1:5])
d <- data.frame(pos=LETTERS[1:5],val=(1:5)^2),
d <- data.frame(pos=LETTERS[1:5],val=(1:5)^2)
d
rPlot(val~pos,data=d,type="bar")
data("mtcars")
head(mtcars)
x <- runir(10000)
x <- runif(10000)
y <- sqrt(x)
mean(y)
mean(y^2)
var(y)
1/18
install.packages("xgboost")
data("iris")
dim(iris)
odd.n <- 2*(1:75)-1
odd.n
iris.train <- iris[odd.n,]
iris.test <- iris[-odd.n,]
library(xgboost)
y <- iris[,5]
y
as.integer(y)
y <- as.integer(y)-1
y
train.x <- iris[,1:4]
x <- rbind(train.x,iris.test[,-5]) # xgboost を使うときのため
x <- as.matrix(x)
class(x)
trind <- 1:length(y) # 先程定義したx の中の訓練データを指すのに使う
teind <- (nrow(train.x)+1):nrow(x) # 先程定義したx の中の検証用データを指す
set.seed(131)
param <- list("objective" = "multi:softprob", # 多クラスの分類で各クラスに所属する確率を求める
"eval_metric" = "mlogloss", # 損失関数の設定
"num_class" = 3 # class がいくつ存在するのか
)
k<-round(1+log2(nrow(train.x)))
k
cv.nround <- 100
bst.cv <- xgb.cv(param=param, data = x[trind,], label = y,  nfold = k, nrounds=cv.nround)
set.seed(131)
nround <- 27
bst <- xgboost(param=param, data = x[trind,], label = y, nrounds=nround)
pred <- predict(bst,x[teind,]) # モデルを使って予測値を算出
pred <- matrix(pred,3,length(pred)/3) # 今回は3クラスあるので
pred
pred <- t(pred)
colnames(pred)<-c("setosa","versicolor","virginica")
pred
setwd("C:/Users/nisiy/Dropbox/1.Rmarkdown-Documentation/Forecast-Lecture/forecast-lesson-m2-2015")
dir()
data0 <- read.csv(file="AustralianBeerProduction-Funny.csv")
head(data0)
bvol <- data0[,3]
bvol
plot(bvol,type="l")
plot(as.integer(bvol),type="l")
ts(bvol)
plot(ts(bvol))
as.integer(bvol)
sort(bvol)
